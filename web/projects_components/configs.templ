package projects_components

import (
	"configuration-management/internal/forms"
	"configuration-management/internal/models"
	"fmt"
	"github.com/google/uuid"
)

templ ConfigDetails(config models.Config) {
	<input
		type="radio"
		id={ "config_tabs_" + config.ID.String() }
		name={ "config_tabs_" + config.ProjectID.String() }
		role="tab"
		class="tab"
		aria-label={ config.Name }
	/>
	<div role="tabpanel" class="tab-content p-6 pb-2">
		<div class="grid grid-cols-2">
			<span class="font-bold">Config ID</span>
			<span>{ config.ID.String() }</span>
			<!-- <span class="font-bold">Host</span> -->
			<!-- <span>{ config.Host }</span> -->
			<span class="font-bold">Header name</span>
			<span>{ config.HeaderName }</span>
			<span class="font-bold">Header value</span>
			<span>{ config.HeaderValue }</span>
		</div>
		<div class="mt-3 flex justify-end">
			<button
				class="btn btn-error flex-1 max-w-[50%]"
				hx-target={ "#config_tabs_" + config.ID.String() }
				hx-swap="outerHTML"
				hx-delete={ "/projects/" + config.ProjectID.String() + "/configs/" + config.ID.String() }
				{ templ.Attributes{"hx-on::after-request": fmt.Sprintf("%s.checked = true", GetDetailsTabID(config.ProjectID))}... }
			>
				Delete config
			</button>
		</div>
	</div>
}

templ CreateConfigForm(projectID uuid.UUID, errors forms.FormErrors) {
	<form
		id={ GetCreateConfigFormID(projectID) }
		method="post"
		action="/"
		hx-post={ "/projects/" + projectID.String() }
		hx-target={ "#tabs_" + projectID.String() }
		hx-swap="beforeend"
		{ templ.Attributes{"hx-on::after-request": fmt.Sprintf("if(event.detail.successful) {this.reset(); %s.submit()}", GetModalFormId(projectID))}... }
	>
		<input type="text" name="name" placeholder="Configuration name" required class={ GetInputClass("Name", errors, "mt-3") }/>
		if err, ok := errors["Name"]; ok {
			<small class="text-red-400">{ err }</small>
		}
		<input type="text" name="header-name" placeholder="Header name" required class={ GetInputClass("HeaderName", errors, "mt-3") }/>
		if err, ok := errors["HeaderName"]; ok {
			<small class="text-red-400">{ err }</small>
		}
		<input type="text" name="header-value" placeholder="Header value" required class={ GetInputClass("HeaderValue", errors, "mt-3") }/>
		if err, ok := errors["HeaderValue"]; ok {
			<small class="text-red-400">{ err }</small>
		}
		<button type="submit" class="btn btn-primary w-full mt-3">Create</button>
	</form>
}

templ CreateConfig(project models.Project) {
	<dialog id={ GetModalId(project.ID) } class="modal">
		<div class="modal-box">
			<form
				method="dialog"
				id={ GetModalFormId(project.ID) }
			>
				<button class="btn btn-sm btn-circle btn-ghost absolute right-2 top-2">âœ•</button>
			</form>
			<h3 class="text-lg font-bold">Create a new configuration</h3>
			@CreateConfigForm(project.ID, nil)
		</div>
	</dialog>
	<button
		class="btn btn-primary flex-1 mr-2"
		{ templ.Attributes{"hx-on:click": fmt.Sprintf("%s.showModal()", GetModalId(project.ID))}... }
	>
		Create configuration
	</button>
}
