package projects_components

import (
	"configuration-management/internal/forms"
	"configuration-management/internal/models"
	"fmt"
	"github.com/google/uuid"
	"strconv"
)

var copyHandle = templ.NewOnceHandle()

templ ConfigDetails(config models.Config) {
	<input
		type="radio"
		id={ "config_tabs_" + config.ID.String() }
		name={ "config_tabs_" + config.ProjectID.String() }
		role="tab"
		class="tab"
		aria-label={ config.Name }
	/>
	<div role="tabpanel" class="tab-content p-6 pb-2">
		<fieldset class="p-3 border rounded-lg border-gray-500">
			<legend class="font-bold text-lg">Details</legend>
			<div class="grid grid-cols-2 gap-1 items-center">
				<span>Config ID</span>
				<span class="text-right">{ config.ID.String() }</span>
				<span>Limit requests</span>
				<span class="text-right">{ strconv.Itoa(config.LimitNumberOfRequests) } / { config.LimitPer }</span>
				<span>Proxy URL</span>
				<div class="text-right">
					<a
						hx-get={ "/projects/" + config.ProjectID.String() + "/configs/" + config.ID.String() + "/connection" }
						hx-target="closest div"
						hx-swap="innerHTML"
						class="link link-primary"
					>Reveal</a>
				</div>
			</div>
		</fieldset>
		<fieldset class="mt-3 p-3 border rounded-lg border-gray-500">
			<legend class="font-bold text-lg">Replace headers</legend>
			@ListHeaderReplacements(config.ProjectID, config.ID, config.HeaderReplacements)
		</fieldset>
		<div class="mt-3 flex justify-end">
			<button
				class="btn btn-error flex-1 max-w-[50%]"
				hx-target={ "#config_tabs_" + config.ID.String() }
				hx-swap="outerHTML"
				hx-delete={ "/projects/" + config.ProjectID.String() + "/configs/" + config.ID.String() }
				{ templ.Attributes{"hx-on::after-request": fmt.Sprintf("%s.checked = true", GetDetailsTabID(config.ProjectID))}... }
			>
				Delete config
			</button>
		</div>
	</div>
}

script copyConnectionStringToClipboard(connectionString string) {
	navigator.clipboard.writeText(connectionString);
}

templ ConfigConnectionString(connectionString string) {
	<div class="flex justify-end">
		<input
			type="text"
			value={ connectionString }
			class="input input-bordered w-full mr-2"
			readonly
		/>
		<button
			class="btn btn-square btn-outline"
			onClick={ copyConnectionStringToClipboard(connectionString) }
		>
			<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6">
				<path stroke-linecap="round" stroke-linejoin="round" d="M15.666 3.888A2.25 2.25 0 0 0 13.5 2.25h-3c-1.03 0-1.9.693-2.166 1.638m7.332 0c.055.194.084.4.084.612v0a.75.75 0 0 1-.75.75H9a.75.75 0 0 1-.75-.75v0c0-.212.03-.418.084-.612m7.332 0c.646.049 1.288.11 1.927.184 1.1.128 1.907 1.077 1.907 2.185V19.5a2.25 2.25 0 0 1-2.25 2.25H6.75A2.25 2.25 0 0 1 4.5 19.5V6.257c0-1.108.806-2.057 1.907-2.185a48.208 48.208 0 0 1 1.927-.184"></path>
			</svg>
		</button>
	</div>
}

templ CreateConfigForm(projectID uuid.UUID, errors forms.FormErrors) {
	<form
		id={ GetCreateConfigFormID(projectID) }
		method="post"
		action="/"
		hx-post={ "/projects/" + projectID.String() + "/configs" }
		hx-target={ "#tabs_" + projectID.String() }
		hx-swap="beforeend"
		{ templ.Attributes{"hx-on::after-request": fmt.Sprintf("if(event.detail.successful) {this.reset(); %s.submit()}", GetModalFormId(projectID))}... }
	>
		<fieldset class="p-3 border rounded-lg border-gray-500 mt-3">
			<legend>Config</legend>
			<input type="text" name="name" placeholder="Configuration name" required class={ GetInputClass("Name", errors, "") }/>
			if err, ok := errors["Name"]; ok {
				<small class="text-red-400">{ err }</small>
			}
			<input type="text" name="header-name" placeholder="Header name" required class={ GetInputClass("HeaderName", errors, "mt-3") }/>
			if err, ok := errors["HeaderName"]; ok {
				<small class="text-red-400">{ err }</small>
			}
			<input type="text" name="header-value" placeholder="Header value" required class={ GetInputClass("HeaderValue", errors, "mt-3") }/>
			if err, ok := errors["HeaderValue"]; ok {
				<small class="text-red-400">{ err }</small>
			}
		</fieldset>
		<fieldset class="p-3 border rounded-lg border-gray-500 mt-3">
			<legend>Rate Limit</legend>
			<input type="number" name="num-of-requests" placeholder="Number of requests" required class={ GetInputClass("NumOfRequests", errors, "") }/>
			if err, ok := errors["NumberOfRequests"]; ok {
				<small class="text-red-400">{ err }</small>
			}
			<select name="requests-per" class="select select-bordered w-full mt-3" required>
				<option disabled selected>Per</option>
				<option value="second">Second</option>
				<option value="minute">Minute</option>
				<option value="hour">Hour</option>
				<option value="day">Day</option>
				<option value="week">Week</option>
				<option value="month">Month</option>
				<option value="year">Year</option>
				<option value="forever">Forever</option>
			</select>
			if err, ok := errors["Per"]; ok {
				<small class="text-red-400">{ err }</small>
			}
		</fieldset>
		<button type="submit" class="btn btn-primary w-full mt-3">Create</button>
	</form>
}

templ CreateConfig(project models.Project) {
	<dialog id={ GetModalId(project.ID) } class="modal">
		<div class="modal-box">
			<form
				method="dialog"
				id={ GetModalFormId(project.ID) }
			>
				<button class="btn btn-sm btn-circle btn-ghost absolute right-2 top-2">âœ•</button>
			</form>
			<h3 class="text-lg font-bold">Create a new configuration</h3>
			@CreateConfigForm(project.ID, nil)
		</div>
	</dialog>
	<button
		class="btn btn-primary flex-1 mr-2"
		{ templ.Attributes{"hx-on:click": fmt.Sprintf("%s.showModal()", GetModalId(project.ID))}... }
	>
		Create configuration
	</button>
}
